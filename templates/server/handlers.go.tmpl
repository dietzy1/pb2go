package server

import (
	"context"

	"github.com/{{.GithubName}}/{{.ServiceName}}/server"
	"google.golang.org/grpc/status"

	pb "github.com/{{.GithubName}}/{{.ServiceName}}/proto/{{.ServiceName}}/v1"

)

type {{.FileName}}Server interface {
	{{range .Rpc}}
	{{.RpcName}}(context.Context, domain.{{.FileName}}, domain.{{.FileName}} error)
	{{end}}


	{{range .Rpc}}
func (s *server) {{.RpcName}}(ctx context.Context, req *pb.{{.RequestName}}) (*pb.{{.ResponseName}}, error) {
	// Implementation goes here...

	input := domain.{{$.FileName}}{
		// Map request fields to domain fields
		{{range .RequestFields}}
		{{.FieldName}}: req.{{.FieldName}},
		{{end}}
	}

	res, err := s.{{$.FileName}}.{{.RpcName}}(ctx, input)
	if err != nil {
		return nil, status.Error(codes.Internal, err.Error())
	}


	return &{{.ResponseName}}{
		// Map response fields to proto fields
		{{range .ResponseFields}}
		{{.FieldName}}: res.{{.FieldName}},
		{{end}}
	}, nil
}
{{end}}
